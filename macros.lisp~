(defun foo (i)
  (when (< i 10)
    (print "BIG")))

(defun primep (number)
  (when (> number 1)
    (loop for fac from 2 to (isqrt number) never (zerop (mod number fac)))))

(defun next-prime (number)
  (loop for n from number when (primep n) return n))

(do ((p (next-prime 0) (next-prime (1+ p))))
    ((> p 19))
  (print p))

(defmacro do-primes ((var start end) &body body)
  ;; the let is still code, gensym is a name
  ;; ending-value-name is holding the name, we interpolate it belowx
  (let ((ending-value-name (gensym)))
    ;; here we are returning code that isn't executed with `
    `(do ((,var (next-prime ,start) (next-prime (1+ ,var)))
	  (,ending-value-name ,end))
	 ((> ,var ,ending-value-name))
       ,@body)))
	  
